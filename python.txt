Python
object’s identity is it’s address in memory and is stored by an object’s reference
comparing strings- “is” is faster than ==
Comparison by “is” is comparison by identity and comparison by == is that by value
identity of object can be obtained by calling id()
None is a special object and there can be only one instance of it. Thus, to compare objects with None Type “is” can be used.
Python 3 has print statement as function
dynamic typing in python- x= “abc” x=48(doesn’t need to specify variable type)
Automatic type promotion:
x=41(int)
y=8.5(float)
x+y
49.5
Binding-assigning value to a variable i.e binding names to objects
Assigning new object to existing variable is called rebinding the name
When object has no name bound to it, it is scheduled for garbage collection(similar to Java)
numbers and strings in python are immutable. For example, y=5 y+=1 This will create a new object 6 which y would refer to  and the object 5 would remain unchanged
Three Integral types-bool, int and long
If a size of integer exceeds 2^31-1 or -2^31, int is automatically type promoted to long
Long example- q=7L
integer literals are assumed to be base 10, except when start with 0x(hexadecimal, base 16) and start with 0(octal. base 8)
String types-str which hold bytes and unicode which hold characters. 7 bit ASCII>strs and 8-bit byes-unicode. Example- euro=unichr(8364)#prints euro symbol on printing, ord(euro) #converts euro to 8364
Along with print statement %d, %f and %s can be used. print(“integer %i and float %.1f” 6.389)
Shorthands for string: For example 
a=“string” 
b=a[:2] >>st
c=a[4:]>>ng 
e=a[-2:]>>ng#when using - sign the 0th element is /o which is at end of the string
d=a[2:4]>>ri  #first numbered element is included but the last is not
len(a)=5
Tuples is an ordered sequence of zero or more object references(like strings they support sequence functions like len()). They can sliced as shown above. They can be nested too as in names=“Albert”, “Brenda”.”Cecil”
names[1]>>’Brenda’
Slicing on tuples will create tuples themselves e.g.. new names=“A”,names[1:]>>”A”, (“Brenda, “Cecil”)
Lists are different from tuples as they can b modified by functions and are mutable.Example of functions on list
fruit.insert(4, "Rowan”)>>insert
del fruit[4]>>delete#del statement is used to remove an item at a particular index position, whereas the remove() method is used to remove an item that matches remove()'s parameter.
We can force Python to do a deep copy by taking a slice that consists of the entire list:
For example,macroalgae = seaweed[:]# this will make any changes done in one not reflected in another. This is opposite to the by default shallow copy of mutable data in Python
Functions on list:
x in a
Returns 
True
 if item 
x
 is in list 
a
x not in a
Returns 
True
 if 
x
 is not in 
a
a + b
Returns a list containing all the items of list 
a
 and of list 
b
; the 
extend()
 method does the same and
is more efficient
len(a)
Returns the length of 
a
a.count(x)
Returns the number of times 
x
 occurs in 
a
a.index(x)
Returns the index position of the leftmost occurrence of 
x
 in 
a
; raises a 
ValueError
 exception if no
x
 is found
a.append(x)
Appends item 
x
 to the end of 
a
a.extend(b)
Appends all 
b
's items to the end of 
a
a.insert(i, x)
Inserts item 
x
 into 
a
 at index position 
i
a.remove(x)
Removes the leftmost occurrence of 
x
 from 
a
; raises a 
ValueError
 exception if no 
x
 is found
a.pop()
Returns and removes the rightmost item of 
a
a.pop(i)
Returns and removes the item at index position 
i
a.reverse()
Reverses the list in-place
a.sort()
Sorts the list in-place; this method accepts optional arguments such as a comparison function or a
"key" to facilitate DSU (decorate, sort, undecorate) sorting

The dict type is a data dictionary, also known as an associative array. A dictionary holds
a set of unordered key–value pairs and provides very fast key lookup. Keys are unique and
must be of an immutable type, such as a Python string, a number, or a tuple; the value can
be of any type including collection types, so it is possible to create arbitrarily nested data structures.

Methods and functions on dictionaries:
x in d
Returns 
True
 if item 
x
 is in dictionary d
x not in d
Returns 
True
 if 
x is not in d
len(d)
Returns the number of items in 
d
d.clear()
Removes all items from 
d
d.copy()
Returns a shallow copy of 
d
d.keys()
Returns a list of all the keys in 
d
d.values()
Returns a list of all the values in 
d
d.items()
Returns a list of tuples of all the (key, value) pairs in 
d
d.get(k)
Returns the value with key 
k
, or 
None
d.get(k, x)
Returns the value with key 
k
 if 
k
 is in 
d
; otherwise returns 
x

Python provides two set types, set and frozenset. Both are unordered, so neither is a
sequence. Sets are mutable so items can be added and removed. Frozensets are immutable
and cannot be changed; however, this means that they are suitable for use as dictionary
keys.

Sets are similar to dictionaries that have only keys and no values.

Conditional Branching:
if elif
indentation in if else helps in avoiding dangling else problem in C
Looping:
while, while also has else option
* An optional else clause will only execute if loop is complemented. If break is called inside loop, else will not be executed.
for:range function()- example range(-4,12,3)>>	[-4, -1, 2, 5, 8, 11]
xrange function>>works more efficiently as it works lazily, not creating all integers in one go.
Example of for loop:
presidents = dict(Washington=(1789, 1797), Adams=(1797, 1801),
                  Jefferson=(1801, 1809), Madison=(1809, 1817))
for key in presidents:
    print "%s: %d-%d" % (key, presidents[key][0], presidents[key][1])

Functions:
A function's name is an object reference to the function, and like any other object reference it can be assigned to another variable or stored in a data structure.
“”” is used to document functions
Properties-
Python does not permit a parameter without a default argument to follow one that has a default argument; so we could not have frange(start=0, 5)
Python does not allow overloaded functions
Comparing with None in Python loops is more efficient than comparing with 0 as None is a global object so comparing using is and is not is very fast.
Python functions can return any number of values.

Using yield:Generator statements do not have return statements, they have yield instead. and because we have used yield, when loop finishes it does not return a value, but instead raises a StopIteration exception. The for loop handles this exception well and understands that iteration has completed.
A generator is an object that has a next() function, so we can explore the behavior of our
frange() generator interactively if we wish:
>>> list(frange(1, 3, 0.75))
[1, 1.75, 2.5]
>>> gen = frange(1, 3, 0.75)
>>> gen.next()
1

Python provides a second way of creating functions:
cube = lambda x: pow(x, 3)
The lambda keyword is used to create simple anonymous functions. Lambda functions
cannot contain control structures (no branches or loops), nor do they have a 
return statement:The value returned is simply whatever the expression evaluates to.

Dynamic Function creation:
The Python interpreter starts reading from the top of the 
.py file. When the interpreter encounters a  def statement it executes the statement, thereby instantiating the function and binding the name following the def to it. Any code that is not inside a def statement or class statement is executed directly.

*Python cannot call functions or use objects that have not been defined. So Python programs
that occupy a single file tend to have a Pascal-like structure with lots of function definitions
from the top down, and at the end a call to one of them to start the processing off
*Unlike C++ and Java, Python programs do not have a fixed entry point, and the name
"main" is not special. The Python interpreter simply executes the code it encounters from
the first line down

Partial Function Application:
Storing a function (i.e., an object reference to a function), that we can then call later. A function stored like this is known as a callback.Eg.
def hello(who):
    print "Hello", who
def goodbye(who):
    print "Goodbye", who
funclist = [hello, goodbye]
# Some time later
for func in funclist:
    func("Me")
>>"Hello Me"
"Goodbye Me"

A solution to this is partial function application(also known as "currying"), which simply
means that we take a function and zero, one, or more parameters for it, and wrap them up
into a new function which when invoked will call the original function with the parameters
we wrapped, and with any others that are passed at call time. Such wrapped functions are
called closures because they encapsulate some of their calling context when they are
created.

import functools
buttonOneFunc = functools.partial(action, "One”)#action is another function and “One”                would be it’s argument
buttonTwoFunc = functools.partial(action, "Two")

Exception handling:
If a handler is found, the interpreter passes control to the handler, and execution continues from there. If, having gone all the way up the call stack to the top-level, no handler is found, the application will terminate and report the exception that was the cause
Syntax-
try:#suite1 get executed first
  suite1
except exceptions:#if an exception occurs control shifts to except statement and if exception match suite 2 is executed
  suite2
else:
  suite3#when no exception occurs suite 3 is executed after suite 1 is finished
try except finally

Different types of error:
finally blocks are always executed whether an exception occurs or not, exactly once, either when the try suite is finished, or when an exception is raised that shifts the flow of control outside the try block.

